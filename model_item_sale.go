/*
mpstats

MPStats API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ItemSale 
type ItemSale struct {
	// 0: OK, 1: Продаж и остатков не зафиксировано
	NoData int32 `json:"no_data"`
	// Дата
	Data string `json:"data"`
	// Остаток
	Balance int32 `json:"balance"`
	// Продажи
	Sales int32 `json:"sales"`
	// Рейтинг
	Rating float32 `json:"rating"`
	// Цена
	Price float32 `json:"price"`
	// Со скидкой
	FinalPrice float32 `json:"final_price"`
	// Новый товар (?)
	IsNew int32 `json:"is_new"`
	// Комментариев
	Comments float32 `json:"comments"`
}

// NewItemSale instantiates a new ItemSale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemSale(noData int32, data string, balance int32, sales int32, rating float32, price float32, finalPrice float32, isNew int32, comments float32) *ItemSale {
	this := ItemSale{}
	this.NoData = noData
	this.Data = data
	this.Balance = balance
	this.Sales = sales
	this.Rating = rating
	this.Price = price
	this.FinalPrice = finalPrice
	this.IsNew = isNew
	this.Comments = comments
	return &this
}

// NewItemSaleWithDefaults instantiates a new ItemSale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemSaleWithDefaults() *ItemSale {
	this := ItemSale{}
	return &this
}

// GetNoData returns the NoData field value
func (o *ItemSale) GetNoData() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NoData
}

// GetNoDataOk returns a tuple with the NoData field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetNoDataOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoData, true
}

// SetNoData sets field value
func (o *ItemSale) SetNoData(v int32) {
	o.NoData = v
}

// GetData returns the Data field value
func (o *ItemSale) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ItemSale) SetData(v string) {
	o.Data = v
}

// GetBalance returns the Balance field value
func (o *ItemSale) GetBalance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetBalanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *ItemSale) SetBalance(v int32) {
	o.Balance = v
}

// GetSales returns the Sales field value
func (o *ItemSale) GetSales() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetSalesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sales, true
}

// SetSales sets field value
func (o *ItemSale) SetSales(v int32) {
	o.Sales = v
}

// GetRating returns the Rating field value
func (o *ItemSale) GetRating() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *ItemSale) SetRating(v float32) {
	o.Rating = v
}

// GetPrice returns the Price field value
func (o *ItemSale) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *ItemSale) SetPrice(v float32) {
	o.Price = v
}

// GetFinalPrice returns the FinalPrice field value
func (o *ItemSale) GetFinalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FinalPrice
}

// GetFinalPriceOk returns a tuple with the FinalPrice field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetFinalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalPrice, true
}

// SetFinalPrice sets field value
func (o *ItemSale) SetFinalPrice(v float32) {
	o.FinalPrice = v
}

// GetIsNew returns the IsNew field value
func (o *ItemSale) GetIsNew() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsNew
}

// GetIsNewOk returns a tuple with the IsNew field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetIsNewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsNew, true
}

// SetIsNew sets field value
func (o *ItemSale) SetIsNew(v int32) {
	o.IsNew = v
}

// GetComments returns the Comments field value
func (o *ItemSale) GetComments() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *ItemSale) GetCommentsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comments, true
}

// SetComments sets field value
func (o *ItemSale) SetComments(v float32) {
	o.Comments = v
}

func (o ItemSale) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["no_data"] = o.NoData
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["sales"] = o.Sales
	}
	if true {
		toSerialize["rating"] = o.Rating
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["final_price"] = o.FinalPrice
	}
	if true {
		toSerialize["is_new"] = o.IsNew
	}
	if true {
		toSerialize["comments"] = o.Comments
	}
	return json.Marshal(toSerialize)
}

type NullableItemSale struct {
	value *ItemSale
	isSet bool
}

func (v NullableItemSale) Get() *ItemSale {
	return v.value
}

func (v *NullableItemSale) Set(val *ItemSale) {
	v.value = val
	v.isSet = true
}

func (v NullableItemSale) IsSet() bool {
	return v.isSet
}

func (v *NullableItemSale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemSale(val *ItemSale) *NullableItemSale {
	return &NullableItemSale{value: val, isSet: true}
}

func (v NullableItemSale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemSale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


