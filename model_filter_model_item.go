/*
mpstats

MPStats API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FilterModelItem 
type FilterModelItem struct {
	FilterType string `json:"filterType"`
	Type string `json:"type"`
	Filter string `json:"filter"`
	FilterTo *string `json:"filterTo,omitempty"`
}

// NewFilterModelItem instantiates a new FilterModelItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterModelItem(filterType string, type_ string, filter string) *FilterModelItem {
	this := FilterModelItem{}
	this.FilterType = filterType
	this.Type = type_
	this.Filter = filter
	return &this
}

// NewFilterModelItemWithDefaults instantiates a new FilterModelItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterModelItemWithDefaults() *FilterModelItem {
	this := FilterModelItem{}
	return &this
}

// GetFilterType returns the FilterType field value
func (o *FilterModelItem) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *FilterModelItem) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *FilterModelItem) SetFilterType(v string) {
	o.FilterType = v
}

// GetType returns the Type field value
func (o *FilterModelItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilterModelItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilterModelItem) SetType(v string) {
	o.Type = v
}

// GetFilter returns the Filter field value
func (o *FilterModelItem) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *FilterModelItem) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *FilterModelItem) SetFilter(v string) {
	o.Filter = v
}

// GetFilterTo returns the FilterTo field value if set, zero value otherwise.
func (o *FilterModelItem) GetFilterTo() string {
	if o == nil || o.FilterTo == nil {
		var ret string
		return ret
	}
	return *o.FilterTo
}

// GetFilterToOk returns a tuple with the FilterTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterModelItem) GetFilterToOk() (*string, bool) {
	if o == nil || o.FilterTo == nil {
		return nil, false
	}
	return o.FilterTo, true
}

// HasFilterTo returns a boolean if a field has been set.
func (o *FilterModelItem) HasFilterTo() bool {
	if o != nil && o.FilterTo != nil {
		return true
	}

	return false
}

// SetFilterTo gets a reference to the given string and assigns it to the FilterTo field.
func (o *FilterModelItem) SetFilterTo(v string) {
	o.FilterTo = &v
}

func (o FilterModelItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filterType"] = o.FilterType
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["filter"] = o.Filter
	}
	if o.FilterTo != nil {
		toSerialize["filterTo"] = o.FilterTo
	}
	return json.Marshal(toSerialize)
}

type NullableFilterModelItem struct {
	value *FilterModelItem
	isSet bool
}

func (v NullableFilterModelItem) Get() *FilterModelItem {
	return v.value
}

func (v *NullableFilterModelItem) Set(val *FilterModelItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterModelItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterModelItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterModelItem(val *FilterModelItem) *NullableFilterModelItem {
	return &NullableFilterModelItem{value: val, isSet: true}
}

func (v NullableFilterModelItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterModelItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


