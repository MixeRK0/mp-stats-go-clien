/*
mpstats

MPStats API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CategoryTrend 
type CategoryTrend struct {
	// Дата начала недели
	Week string `json:"week"`
	// Число продаж
	Sales float32 `json:"sales"`
	// Суммарная выручка в рубрике
	Revenue float32 `json:"revenue"`
	// Сумма выручки категории, разделенная на число товаров
	ProductRevenue float32 `json:"product_revenue"`
	// Число товаров в рубрике на указанной неделе
	Items float32 `json:"items"`
	// Число брендов в рубрике на указанной неделе
	Brands float32 `json:"brands"`
	//  Число продавцов в рубрике на указанной неделе
	Sellers float32 `json:"sellers"`
	// Количество брендов с продажами
	BrandsWithSells float32 `json:"brands_with_sells"`
	// Количество товаров с продажами
	ItemsWithSells float32 `json:"items_with_sells"`
	// Количество продавцов с продажами
	SellersWithSells float32 `json:"sellers_with_sells"`
}

// NewCategoryTrend instantiates a new CategoryTrend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryTrend(week string, sales float32, revenue float32, productRevenue float32, items float32, brands float32, sellers float32, brandsWithSells float32, itemsWithSells float32, sellersWithSells float32) *CategoryTrend {
	this := CategoryTrend{}
	this.Week = week
	this.Sales = sales
	this.Revenue = revenue
	this.ProductRevenue = productRevenue
	this.Items = items
	this.Brands = brands
	this.Sellers = sellers
	this.BrandsWithSells = brandsWithSells
	this.ItemsWithSells = itemsWithSells
	this.SellersWithSells = sellersWithSells
	return &this
}

// NewCategoryTrendWithDefaults instantiates a new CategoryTrend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryTrendWithDefaults() *CategoryTrend {
	this := CategoryTrend{}
	return &this
}

// GetWeek returns the Week field value
func (o *CategoryTrend) GetWeek() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Week
}

// GetWeekOk returns a tuple with the Week field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Week, true
}

// SetWeek sets field value
func (o *CategoryTrend) SetWeek(v string) {
	o.Week = v
}

// GetSales returns the Sales field value
func (o *CategoryTrend) GetSales() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetSalesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sales, true
}

// SetSales sets field value
func (o *CategoryTrend) SetSales(v float32) {
	o.Sales = v
}

// GetRevenue returns the Revenue field value
func (o *CategoryTrend) GetRevenue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetRevenueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revenue, true
}

// SetRevenue sets field value
func (o *CategoryTrend) SetRevenue(v float32) {
	o.Revenue = v
}

// GetProductRevenue returns the ProductRevenue field value
func (o *CategoryTrend) GetProductRevenue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProductRevenue
}

// GetProductRevenueOk returns a tuple with the ProductRevenue field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetProductRevenueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductRevenue, true
}

// SetProductRevenue sets field value
func (o *CategoryTrend) SetProductRevenue(v float32) {
	o.ProductRevenue = v
}

// GetItems returns the Items field value
func (o *CategoryTrend) GetItems() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetItemsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *CategoryTrend) SetItems(v float32) {
	o.Items = v
}

// GetBrands returns the Brands field value
func (o *CategoryTrend) GetBrands() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetBrandsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Brands, true
}

// SetBrands sets field value
func (o *CategoryTrend) SetBrands(v float32) {
	o.Brands = v
}

// GetSellers returns the Sellers field value
func (o *CategoryTrend) GetSellers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Sellers
}

// GetSellersOk returns a tuple with the Sellers field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetSellersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sellers, true
}

// SetSellers sets field value
func (o *CategoryTrend) SetSellers(v float32) {
	o.Sellers = v
}

// GetBrandsWithSells returns the BrandsWithSells field value
func (o *CategoryTrend) GetBrandsWithSells() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BrandsWithSells
}

// GetBrandsWithSellsOk returns a tuple with the BrandsWithSells field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetBrandsWithSellsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrandsWithSells, true
}

// SetBrandsWithSells sets field value
func (o *CategoryTrend) SetBrandsWithSells(v float32) {
	o.BrandsWithSells = v
}

// GetItemsWithSells returns the ItemsWithSells field value
func (o *CategoryTrend) GetItemsWithSells() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ItemsWithSells
}

// GetItemsWithSellsOk returns a tuple with the ItemsWithSells field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetItemsWithSellsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemsWithSells, true
}

// SetItemsWithSells sets field value
func (o *CategoryTrend) SetItemsWithSells(v float32) {
	o.ItemsWithSells = v
}

// GetSellersWithSells returns the SellersWithSells field value
func (o *CategoryTrend) GetSellersWithSells() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SellersWithSells
}

// GetSellersWithSellsOk returns a tuple with the SellersWithSells field value
// and a boolean to check if the value has been set.
func (o *CategoryTrend) GetSellersWithSellsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellersWithSells, true
}

// SetSellersWithSells sets field value
func (o *CategoryTrend) SetSellersWithSells(v float32) {
	o.SellersWithSells = v
}

func (o CategoryTrend) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["week"] = o.Week
	}
	if true {
		toSerialize["sales"] = o.Sales
	}
	if true {
		toSerialize["revenue"] = o.Revenue
	}
	if true {
		toSerialize["product_revenue"] = o.ProductRevenue
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["brands"] = o.Brands
	}
	if true {
		toSerialize["sellers"] = o.Sellers
	}
	if true {
		toSerialize["brands_with_sells"] = o.BrandsWithSells
	}
	if true {
		toSerialize["items_with_sells"] = o.ItemsWithSells
	}
	if true {
		toSerialize["sellers_with_sells"] = o.SellersWithSells
	}
	return json.Marshal(toSerialize)
}

type NullableCategoryTrend struct {
	value *CategoryTrend
	isSet bool
}

func (v NullableCategoryTrend) Get() *CategoryTrend {
	return v.value
}

func (v *NullableCategoryTrend) Set(val *CategoryTrend) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryTrend) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryTrend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryTrend(val *CategoryTrend) *NullableCategoryTrend {
	return &NullableCategoryTrend{value: val, isSet: true}
}

func (v NullableCategoryTrend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryTrend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


