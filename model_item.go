/*
mpstats

MPStats API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Item 
type Item struct {
	Item ItemItem `json:"item"`
	Photos []ItemPhotos `json:"photos"`
}

// NewItem instantiates a new Item object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItem(item ItemItem, photos []ItemPhotos) *Item {
	this := Item{}
	this.Item = item
	this.Photos = photos
	return &this
}

// NewItemWithDefaults instantiates a new Item object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithDefaults() *Item {
	this := Item{}
	return &this
}

// GetItem returns the Item field value
func (o *Item) GetItem() ItemItem {
	if o == nil {
		var ret ItemItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *Item) GetItemOk() (*ItemItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *Item) SetItem(v ItemItem) {
	o.Item = v
}

// GetPhotos returns the Photos field value
func (o *Item) GetPhotos() []ItemPhotos {
	if o == nil {
		var ret []ItemPhotos
		return ret
	}

	return o.Photos
}

// GetPhotosOk returns a tuple with the Photos field value
// and a boolean to check if the value has been set.
func (o *Item) GetPhotosOk() ([]ItemPhotos, bool) {
	if o == nil {
		return nil, false
	}
	return o.Photos, true
}

// SetPhotos sets field value
func (o *Item) SetPhotos(v []ItemPhotos) {
	o.Photos = v
}

func (o Item) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["item"] = o.Item
	}
	if true {
		toSerialize["photos"] = o.Photos
	}
	return json.Marshal(toSerialize)
}

type NullableItem struct {
	value *Item
	isSet bool
}

func (v NullableItem) Get() *Item {
	return v.value
}

func (v *NullableItem) Set(val *Item) {
	v.value = val
	v.isSet = true
}

func (v NullableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItem(val *Item) *NullableItem {
	return &NullableItem{value: val, isSet: true}
}

func (v NullableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


