/*
mpstats

MPStats API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ItemByCategory 
type ItemByCategory struct {
	// Остаток
	Balance []int32 `json:"balance"`
	// Категория и позиции в ней. NaN: Позиция не определена
	Categories map[string]interface{} `json:"categories"`
	// Дни
	Days []string `json:"days"`
	// Цена со скидкой
	FinalPrice []float32 `json:"final_price"`
	// Продаж
	Sales []int32 `json:"sales"`
}

// NewItemByCategory instantiates a new ItemByCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemByCategory(balance []int32, categories map[string]interface{}, days []string, finalPrice []float32, sales []int32) *ItemByCategory {
	this := ItemByCategory{}
	this.Balance = balance
	this.Categories = categories
	this.Days = days
	this.FinalPrice = finalPrice
	this.Sales = sales
	return &this
}

// NewItemByCategoryWithDefaults instantiates a new ItemByCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemByCategoryWithDefaults() *ItemByCategory {
	this := ItemByCategory{}
	return &this
}

// GetBalance returns the Balance field value
func (o *ItemByCategory) GetBalance() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *ItemByCategory) GetBalanceOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balance, true
}

// SetBalance sets field value
func (o *ItemByCategory) SetBalance(v []int32) {
	o.Balance = v
}

// GetCategories returns the Categories field value
func (o *ItemByCategory) GetCategories() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *ItemByCategory) GetCategoriesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *ItemByCategory) SetCategories(v map[string]interface{}) {
	o.Categories = v
}

// GetDays returns the Days field value
func (o *ItemByCategory) GetDays() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Days
}

// GetDaysOk returns a tuple with the Days field value
// and a boolean to check if the value has been set.
func (o *ItemByCategory) GetDaysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Days, true
}

// SetDays sets field value
func (o *ItemByCategory) SetDays(v []string) {
	o.Days = v
}

// GetFinalPrice returns the FinalPrice field value
func (o *ItemByCategory) GetFinalPrice() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.FinalPrice
}

// GetFinalPriceOk returns a tuple with the FinalPrice field value
// and a boolean to check if the value has been set.
func (o *ItemByCategory) GetFinalPriceOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinalPrice, true
}

// SetFinalPrice sets field value
func (o *ItemByCategory) SetFinalPrice(v []float32) {
	o.FinalPrice = v
}

// GetSales returns the Sales field value
func (o *ItemByCategory) GetSales() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value
// and a boolean to check if the value has been set.
func (o *ItemByCategory) GetSalesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sales, true
}

// SetSales sets field value
func (o *ItemByCategory) SetSales(v []int32) {
	o.Sales = v
}

func (o ItemByCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["categories"] = o.Categories
	}
	if true {
		toSerialize["days"] = o.Days
	}
	if true {
		toSerialize["final_price"] = o.FinalPrice
	}
	if true {
		toSerialize["sales"] = o.Sales
	}
	return json.Marshal(toSerialize)
}

type NullableItemByCategory struct {
	value *ItemByCategory
	isSet bool
}

func (v NullableItemByCategory) Get() *ItemByCategory {
	return v.value
}

func (v *NullableItemByCategory) Set(val *ItemByCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableItemByCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableItemByCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemByCategory(val *ItemByCategory) *NullableItemByCategory {
	return &NullableItemByCategory{value: val, isSet: true}
}

func (v NullableItemByCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemByCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


