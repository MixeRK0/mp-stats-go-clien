/*
mpstats

MPStats API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CategoryByDate 
type CategoryByDate struct {
	//  Дата
	Data string `json:"data"`
	// Кол-во брендов
	Brands int32 `json:"brands"`
	// Кол-во продавцов
	Sellers int32 `json:"sellers"`
	// Средняя цена товара в категории (все товары, среднее арифметическое)
	AvgPrice float32 `json:"avg_price"`
	// Средняя цена состоявшейся продажи (деление выручки на число продаж)
	AvgSalePrice float32 `json:"avg_sale_price"`
	// Число товаров
	Items int32 `json:"items"`
	// Число зафиксированных продаж (единицы)
	Sales int32 `json:"sales"`
	// Сумма произведений числа проданных товаров на их стоимость
	Revenue float32 `json:"revenue"`
	// Среднее число комментариев
	Comments float32 `json:"comments"`
	// Средний рейтинг
	Rating float32 `json:"rating"`
}

// NewCategoryByDate instantiates a new CategoryByDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryByDate(data string, brands int32, sellers int32, avgPrice float32, avgSalePrice float32, items int32, sales int32, revenue float32, comments float32, rating float32) *CategoryByDate {
	this := CategoryByDate{}
	this.Data = data
	this.Brands = brands
	this.Sellers = sellers
	this.AvgPrice = avgPrice
	this.AvgSalePrice = avgSalePrice
	this.Items = items
	this.Sales = sales
	this.Revenue = revenue
	this.Comments = comments
	this.Rating = rating
	return &this
}

// NewCategoryByDateWithDefaults instantiates a new CategoryByDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryByDateWithDefaults() *CategoryByDate {
	this := CategoryByDate{}
	return &this
}

// GetData returns the Data field value
func (o *CategoryByDate) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CategoryByDate) SetData(v string) {
	o.Data = v
}

// GetBrands returns the Brands field value
func (o *CategoryByDate) GetBrands() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetBrandsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Brands, true
}

// SetBrands sets field value
func (o *CategoryByDate) SetBrands(v int32) {
	o.Brands = v
}

// GetSellers returns the Sellers field value
func (o *CategoryByDate) GetSellers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sellers
}

// GetSellersOk returns a tuple with the Sellers field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetSellersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sellers, true
}

// SetSellers sets field value
func (o *CategoryByDate) SetSellers(v int32) {
	o.Sellers = v
}

// GetAvgPrice returns the AvgPrice field value
func (o *CategoryByDate) GetAvgPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvgPrice
}

// GetAvgPriceOk returns a tuple with the AvgPrice field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetAvgPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvgPrice, true
}

// SetAvgPrice sets field value
func (o *CategoryByDate) SetAvgPrice(v float32) {
	o.AvgPrice = v
}

// GetAvgSalePrice returns the AvgSalePrice field value
func (o *CategoryByDate) GetAvgSalePrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvgSalePrice
}

// GetAvgSalePriceOk returns a tuple with the AvgSalePrice field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetAvgSalePriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvgSalePrice, true
}

// SetAvgSalePrice sets field value
func (o *CategoryByDate) SetAvgSalePrice(v float32) {
	o.AvgSalePrice = v
}

// GetItems returns the Items field value
func (o *CategoryByDate) GetItems() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetItemsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *CategoryByDate) SetItems(v int32) {
	o.Items = v
}

// GetSales returns the Sales field value
func (o *CategoryByDate) GetSales() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetSalesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sales, true
}

// SetSales sets field value
func (o *CategoryByDate) SetSales(v int32) {
	o.Sales = v
}

// GetRevenue returns the Revenue field value
func (o *CategoryByDate) GetRevenue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetRevenueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revenue, true
}

// SetRevenue sets field value
func (o *CategoryByDate) SetRevenue(v float32) {
	o.Revenue = v
}

// GetComments returns the Comments field value
func (o *CategoryByDate) GetComments() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetCommentsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comments, true
}

// SetComments sets field value
func (o *CategoryByDate) SetComments(v float32) {
	o.Comments = v
}

// GetRating returns the Rating field value
func (o *CategoryByDate) GetRating() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *CategoryByDate) GetRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *CategoryByDate) SetRating(v float32) {
	o.Rating = v
}

func (o CategoryByDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["brands"] = o.Brands
	}
	if true {
		toSerialize["sellers"] = o.Sellers
	}
	if true {
		toSerialize["avg_price"] = o.AvgPrice
	}
	if true {
		toSerialize["avg_sale_price"] = o.AvgSalePrice
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["sales"] = o.Sales
	}
	if true {
		toSerialize["revenue"] = o.Revenue
	}
	if true {
		toSerialize["comments"] = o.Comments
	}
	if true {
		toSerialize["rating"] = o.Rating
	}
	return json.Marshal(toSerialize)
}

type NullableCategoryByDate struct {
	value *CategoryByDate
	isSet bool
}

func (v NullableCategoryByDate) Get() *CategoryByDate {
	return v.value
}

func (v *NullableCategoryByDate) Set(val *CategoryByDate) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryByDate) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryByDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryByDate(val *CategoryByDate) *NullableCategoryByDate {
	return &NullableCategoryByDate{value: val, isSet: true}
}

func (v NullableCategoryByDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryByDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


